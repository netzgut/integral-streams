buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'com.github.hierynomus.license' version '0.14.0'
}
group 'net.netzgut.integral'
version '0.0.1-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

project.ext.versions = [
     testng: '6.12'
]

dependencies {
     testCompile "org.testng:testng:${versions.testng}"
}

test {
    useTestNG()

    options.suites("src/test/conf/testng.xml")

    maxHeapSize = "600M"

    jvmArgs("-XX:MaxPermSize=256M")

    enableAssertions = true
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}


task pom {
    doLast {
        pom {
            packaging = 'jar'
            project {
                inceptionYear '2016'
                name rootProject.name
                description 'A simple streams helper'
                url 'https://github.com/netzgut/integral-streams.git'
                properties {
                    'project.build.sourceEncoding' 'UTF-8'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'https://github.com/netzgut/integral-streams.git'
                    connection 'scm:git:git://github.com/netzgut/integral-streams.git'
                    developerConnection 'scm:git:git@github.com:netzgut/integral-streams.git'
                }
            }
        }.withXml { xmlProvider ->
            def plugins = xmlProvider.asNode().appendNode('build').appendNode('plugins')
            def mavenCompilerPlugin = plugins.appendNode('plugin')
            mavenCompilerPlugin.appendNode('artifactId').value = 'maven-compiler-plugin'
            mavenCompilerPlugin.appendNode('version').value = '3.5.1'
            def mavenCompilerPluginConfiguration = mavenCompilerPlugin.appendNode('configuration')
            mavenCompilerPluginConfiguration.appendNode('source').value = sourceCompatibility
            mavenCompilerPluginConfiguration.appendNode('target').value = targetCompatibility
    
            def mavenSurefirePlugin = plugins.appendNode('plugin')
            mavenSurefirePlugin.appendNode('artifactId').value = 'maven-surfire-plugin'
            mavenSurefirePlugin.appendNode('version').value = '2.19.1'
            mavenSurefirePlugin.appendNode('configuration')
        }.writeTo('pom.xml')
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives sourcesJar }

uploadArchives {
    // We need to set the variables if not present
    ext.snapshot_repository = project.hasProperty('snapshot-repository') ? project.property('snapshot-repository') : ''
    ext.snapshot_repository_username = project.hasProperty('snapshot-repository-username') ? project.property('snapshot-repository-username') : ''
    ext.snapshot_repository_password = project.hasProperty('snapshot-repository-password') ? project.property('snapshot-repository-password') : ''

    repositories {
        mavenDeployer {
            snapshotRepository(url: snapshot_repository) {
                authentication(userName: snapshot_repository_username, password: snapshot_repository_password)
            }
        }
    }
}

license {
    header rootProject.file('src/main/resources/META-INF/LICENSE.txt')
    strictCheck true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
}